# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
  worker_connections {{ worker_connections }};
}

http {
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;
  server_names_hash_bucket_size 128;
  
  server_tokens       off;
  sendfile            on;
  tcp_nopush          on;
  tcp_nodelay         on;
  keepalive_timeout   65;
  types_hash_max_size 2048;

  include /etc/nginx/mime.types;
  default_type        application/octet-stream;

  # Load modular configuration files from the /etc/nginx/conf.d directory.
  # See http://nginx.org/en/docs/ngx_core_module.html#include
  # for more information.
  include /etc/nginx/conf.d/*.conf;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }


{% for upstream in gw_upstreams %}
  upstream {{ upstream.name }} {
{% for member in upstream.members %}
    server {{ member }};
{% endfor %}
  }
{% endfor %}

{% for website in gw_websites %}
  server {
    listen       {{ website.port }} default_server;
    listen       [::]:{{ website.port }} default_server;
    server_name  _;
    root         {{ website.path }};
{% if website.max_body_size is defined %}
      client_max_body_size {{ website.max_body_size }};
{% else %}
      client_max_body_size {{ default_max_body_size }};
{% endif %}

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;

    index index.html index.htm;

    location / {
      include /etc/nginx/jail.conf;
      proxy_hide_header X-Powered-By;
{% if website.auth_file is defined %}
      auth_basic           "Authentication";
      auth_basic_user_file "/etc/nginx/auth/{{ proxy.auth_file }}";
{% endif %}
    }
  }
{% endfor %}

{% for proxy in gw_proxies %}
{% if proxy.certonly is not defined or not proxy.certonly %}
  server {
{% if proxy.grpc_target is defined and proxy.grpc_target %}
      include /etc/nginx/grpc_server.conf;
{% else %}
      include /etc/nginx/https_server.conf;
{% endif %}
      server_name {{ proxy.domain }};
{% if not proxy.disable_tls is defined or not proxy.disable_tls %}
{% if proxy.cert_suffix is defined %}
      ssl_certificate /etc/letsencrypt/live/{{ proxy.domain }}-{{ proxy.cert_suffix }}/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/{{ proxy.domain }}-{{ proxy.cert_suffix }}/privkey.pem;
{% elif proxy.cert_path is defined %}
      ssl_certificate {{ proxy.cert_path }}/fullchain.pem;
      ssl_certificate_key {{ proxy.cert_path }}/privkey.pem;
{% else %}
      ssl_certificate /etc/letsencrypt/live/{{ proxy.domain }}/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/{{ proxy.domain }}/privkey.pem;
{% endif %}
{% endif %}
{% if proxy.max_body_size is defined %}
      client_max_body_size {{ proxy.max_body_size }};
{% else %}
      client_max_body_size {{ default_max_body_size }};
{% endif %}
{% if proxy.websocket_target is defined %}
      location /sockjs-node {
        include /etc/nginx/jail.conf;
        proxy_pass http://{{ proxy.websocket_target }};
        include /etc/nginx/websocket_proxy.conf;
      }
{% endif %}
{% if proxy.fpm_config is defined and proxy.fpm_config %}
      include /etc/nginx/{{ proxy.fpm_config }}.conf;
{% else %}
      location / {
{% if proxy.grpc_target is not defined %}
        include /etc/nginx/jail.conf;
        proxy_hide_header X-Powered-By;
{% endif %}
{% if proxy.auth_file is defined %}
        auth_basic           "Authentication";
        auth_basic_user_file "/etc/nginx/auth/{{ proxy.auth_file }}";
{% endif %}
{% if proxy.elastic is defined and elastic_basic_auth is defined and proxy.elastic %}
        proxy_set_header Authorization "Basic {{ elastic_basic_auth }}";
{% endif %}
{% if proxy.ip_whitelist is defined and proxy.ip_whitelist|length > 0 %}
{% for whitelist_item in proxy.ip_whitelist %}
      allow {{ whitelist_item.ip }}/{{ whitelist_item.cidr }};
{% endfor %}
      deny all;
{% endif %}
{% if proxy.grpc_target is defined and proxy.grpc_target %}
{% if proxy.target_scheme is defined %}
        grpc_pass {{ proxy.target_scheme }}://{{ proxy.grpc_target }};
{% else %}
        grpc_pass grpc://{{ proxy.grpc_target }};
{% endif %}
{% endif %}
{% if proxy.ip_domain is defined and proxy.ip_domain %}
        include /etc/nginx/ip_domain.conf;
{% endif %}
{% if proxy.target is defined %}
{% if proxy.target_scheme is defined %}
        proxy_pass {{ proxy.target_scheme }}://{{ proxy.target }};
{% else %}
        proxy_pass http://{{ proxy.target }};
{% endif %}
{% endif %}
{% if proxy.proxy_ssl_verify is defined %}
        proxy_ssl_verify {{ proxy.proxy_ssl_verify }};
{% endif %}
{% if proxy.conf is defined %}
        include /etc/nginx/{{ proxy.conf }}.conf;
{% else %}
{% if proxy.hide_auth is defined and proxy.hide_auth %}
        proxy_hide_header Authorization;
{% else %}
{% if proxy.grpc_target is not defined
        and (proxy.disable_headers_propagation is not defined or not proxy.disable_headers_propagation)
%}
        include /etc/nginx/default_proxy.conf;
{% endif %}
{% endif %}
{% endif %}
{% if proxy.regsub is defined %}
        rewrite ^/(.*) /{{ proxy.regsub }}/$1 break;
{% endif %}
{% if proxy.redirect_target is defined %}
{% if proxy.redirect_http_code is defined %}
{% if proxy.redirect_follow is defined and proxy.redirect_follow %}
        return {{ proxy.redirect_http_code }} {{ proxy.redirect_target }}$request_uri;
{% else %}
        return {{ proxy.redirect_http_code }} {{ proxy.redirect_target }};
{% endif %}
{% else %}
{% if proxy.redirect_follow is defined and proxy.redirect_follow %}
        return 301 {{ proxy.redirect_target }}$request_uri;
{% else %}
        return 301 {{ proxy.redirect_target }};
{% endif %}
{% endif %}
{% endif %}
      }
{% endif %}
  }
{% endif %}
{% endfor %}

  server {
    listen  80;
    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;

    location / {
      include /etc/nginx/jail.conf;
      return 301 https://$host$request_uri;
    }

    location ^~ /.well-known/acme-challenge/ {
        include /etc/nginx/jail.conf;
        # Set correct content type. According to this:
        # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
        # Current specification requires "text/plain" or no content header at all.
        # It seems that "text/plain" is a safe option.
        default_type "text/plain";

        # This directory must be the same as in /etc/letsencrypt/cli.ini
        # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
        # there to "webroot".
        # Do NOT use alias, use root! Target directory is located here:
        # /var/www/common/letsencrypt/.well-known/acme-challenge/
        root         /var/www/letsencrypt;
    }

    # Hide /acme-challenge subdirectory and return 404 on all requests.
    # It is somewhat more secure than letting Nginx return 403.
    # Ending slash is important!
    location = /.well-known/acme-challenge/ {
        return 404;
    }

    error_page 404 /404.html;
    location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }
  }
}
